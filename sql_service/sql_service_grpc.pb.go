// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sql_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SQLServicesClient is the client API for SQLServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLServicesClient interface {
	RawQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	InsertQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	SelectQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	UpdateQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	DeleteQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
}

type sQLServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLServicesClient(cc grpc.ClientConnInterface) SQLServicesClient {
	return &sQLServicesClient{cc}
}

func (c *sQLServicesClient) RawQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/sql_service.SQLServices/raw_query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServicesClient) InsertQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/sql_service.SQLServices/insert_query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServicesClient) SelectQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/sql_service.SQLServices/select_query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServicesClient) UpdateQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/sql_service.SQLServices/update_query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServicesClient) DeleteQuery(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/sql_service.SQLServices/delete_query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLServicesServer is the server API for SQLServices service.
// All implementations must embed UnimplementedSQLServicesServer
// for forward compatibility
type SQLServicesServer interface {
	RawQuery(context.Context, *Input) (*Output, error)
	InsertQuery(context.Context, *Input) (*Output, error)
	SelectQuery(context.Context, *Input) (*Output, error)
	UpdateQuery(context.Context, *Input) (*Output, error)
	DeleteQuery(context.Context, *Input) (*Output, error)
	mustEmbedUnimplementedSQLServicesServer()
}

// UnimplementedSQLServicesServer must be embedded to have forward compatible implementations.
type UnimplementedSQLServicesServer struct {
}

func (UnimplementedSQLServicesServer) RawQuery(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawQuery not implemented")
}
func (UnimplementedSQLServicesServer) InsertQuery(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertQuery not implemented")
}
func (UnimplementedSQLServicesServer) SelectQuery(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectQuery not implemented")
}
func (UnimplementedSQLServicesServer) UpdateQuery(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuery not implemented")
}
func (UnimplementedSQLServicesServer) DeleteQuery(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuery not implemented")
}
func (UnimplementedSQLServicesServer) mustEmbedUnimplementedSQLServicesServer() {}

// UnsafeSQLServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLServicesServer will
// result in compilation errors.
type UnsafeSQLServicesServer interface {
	mustEmbedUnimplementedSQLServicesServer()
}

func RegisterSQLServicesServer(s grpc.ServiceRegistrar, srv SQLServicesServer) {
	s.RegisterService(&SQLServices_ServiceDesc, srv)
}

func _SQLServices_RawQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServicesServer).RawQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql_service.SQLServices/raw_query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServicesServer).RawQuery(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLServices_InsertQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServicesServer).InsertQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql_service.SQLServices/insert_query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServicesServer).InsertQuery(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLServices_SelectQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServicesServer).SelectQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql_service.SQLServices/select_query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServicesServer).SelectQuery(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLServices_UpdateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServicesServer).UpdateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql_service.SQLServices/update_query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServicesServer).UpdateQuery(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLServices_DeleteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServicesServer).DeleteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql_service.SQLServices/delete_query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServicesServer).DeleteQuery(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLServices_ServiceDesc is the grpc.ServiceDesc for SQLServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sql_service.SQLServices",
	HandlerType: (*SQLServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "raw_query",
			Handler:    _SQLServices_RawQuery_Handler,
		},
		{
			MethodName: "insert_query",
			Handler:    _SQLServices_InsertQuery_Handler,
		},
		{
			MethodName: "select_query",
			Handler:    _SQLServices_SelectQuery_Handler,
		},
		{
			MethodName: "update_query",
			Handler:    _SQLServices_UpdateQuery_Handler,
		},
		{
			MethodName: "delete_query",
			Handler:    _SQLServices_DeleteQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sql_service/sql_service.proto",
}
